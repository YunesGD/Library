# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'User.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.



from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtSql import QSqlDatabase, QSqlQuery, QSqlTableModel
import uuid

import sqlite3

class Ui_OtherWindow(object):

    def __init__(self, username , password):
        self.username = username
        self.password = password
        self.db = QSqlDatabase("QSQLITE")
        self.db.setDatabaseName("liberary_info.db")
        self.db.open()
    
    def setupUi(self, OtherWindow):
        OtherWindow.setObjectName("OtherWindow")
        OtherWindow.resize(700, 400)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Book_Manager_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        OtherWindow.setWindowIcon(icon)
        OtherWindow.setStyleSheet("#MainWindow{\n"
"background-image:url(\"lib.jpg\");\n"
"}\n"
"\n"
"\n"
"QLabel{\n"
"color: black;\n"
"font: 11pt \"OCR-B 10 BT\";\n"
"\n"
"}\n"
"QLineEdit{\n"
"width:300px;\n"
"height:40px;\n"
"background-color:transparent;\n"
"border: 2px solid #999;\n"
"border-radius: 10px;\n"
"padding-left: 10px;\n"
"color: black;\n"
"font: 12pt \"OCR-B 10 BT\";\n"
"}\n"
"\n"
"QPushButton{\n"
"width:300px;\n"
"height:40px;\n"
"background-color:transparent;\n"
"border: 2px solid #999;\n"
"border-radius: 10px;\n"
"}\n"
"QPushButton:hover{\n"
"width:300px;\n"
"height:40px;\n"
"background-color:transparent;\n"
"border: 2px solid #999;\n"
"border-radius: 10px;\n"
"background-color: rgba(0, 0, 0, 0.6);\n"
"}\n"
"")
        self.centralwidget = QtWidgets.QWidget(OtherWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_3 = QtWidgets.QLabel(self.tab)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.lineEdit_Search = QtWidgets.QLineEdit(self.tab)
        self.lineEdit_Search.setStyleSheet("background:rgb(255, 255, 255)")
        self.lineEdit_Search.setObjectName("lineEdit_Search")
        self.horizontalLayout.addWidget(self.lineEdit_Search)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.tableView = QtWidgets.QTableView(self.tab)
        self.tableView.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.tableView.setObjectName("tableView")
        self.verticalLayout_2.addWidget(self.tableView)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_4 = QtWidgets.QLabel(self.tab_2)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_2.addWidget(self.label_4)
        self.lineEdit_Search_2 = QtWidgets.QLineEdit(self.tab_2)
        self.lineEdit_Search_2.setStyleSheet("background:rgb(255, 255, 255)")
        self.lineEdit_Search_2.setObjectName("lineEdit_Search_2")
        self.horizontalLayout_2.addWidget(self.lineEdit_Search_2)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.pushButton = QtWidgets.QPushButton(self.tab_2)
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout_3.addWidget(self.pushButton)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem)
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout.addWidget(self.tabWidget)
        OtherWindow.setCentralWidget(self.centralwidget)
        # set readonly for taleview
        self.tableView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.pushButton.clicked.connect(self.reserve_book)

        self.retranslateUi(OtherWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(OtherWindow)


        self.model = QSqlTableModel(db= self.db)
        self.model.setTable("book")
        self.tableView.setModel(self.model)
        self.tableView.show()
        self.model.select()
        self.lineEdit_Search.textChanged.connect(self.search)

    def search(self, text):
        self.model.setFilter(f"name LIKE '%{text}%'")
        self.model.select()
        self.tableView.show()


    def retranslateUi(self, OtherWindow):
        _translate = QtCore.QCoreApplication.translate
        OtherWindow.setWindowTitle(_translate("OtherWindow", "Book Manager"))
        self.label_3.setText(_translate("OtherWindow", "Enter Name of the book"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("OtherWindow", "search book"))
        self.label_4.setText(_translate("OtherWindow", "Enter ID of the book"))
        self.pushButton.setText(_translate("OtherWindow", "Reserve"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("OtherWindow", "Request for book"))

    def reserve_book(self):
        conn = sqlite3.connect('liberary_info.db')
        cur = conn.cursor()
        # select status
        cur.execute("SELECT status FROM book WHERE id = ?", (self.lineEdit_Search_2.text(),))
        corr_status = cur.fetchone()[0]
        if corr_status == 'available':
            cur.execute("SELECT Book_1, Book_2, Book_3 FROM users WHERE id = ?", (self.password,))

            corr_books = cur.fetchone()
            if corr_books[0] == 'None':
                cur.execute("UPDATE users SET Book_1 = ? WHERE id = ?", (self.lineEdit_Search_2.text(), self.password))
                cur.execute("UPDATE book SET status = 'reserved' WHERE id = ?", (self.lineEdit_Search_2.text(),))

                conn.commit()
                self.show_message('Book Reserved for {} '.format(self.username))
            elif corr_books[1] == 'None':
                cur.execute("UPDATE users SET Book_2 = ? WHERE id = ?", (self.lineEdit_Search_2.text(), self.password))
                cur.execute("UPDATE book SET status = 'reserved' WHERE id = ?", (self.lineEdit_Search_2.text(),))

                conn.commit()
                self.show_message('Book Reserved for {} '.format(self.username))
            elif corr_books[2] == 'None':
                cur.execute("UPDATE users SET Book_3 = ? WHERE id = ?", (self.lineEdit_Search_2.text(), self.password))
                cur.execute("UPDATE book SET status = 'reserved' WHERE id = ?", (self.lineEdit_Search_2.text(),))

                conn.commit()
                self.show_message('Book Reserved for {} '.format(self.username))
            else:
                self.show_message('You have already reserved 3 books')

            # regester book for user
            
            conn.commit()
            self.model.select()
            self.tableView.show()
            self.lineEdit_Search_2.clear()
            self.lineEdit_Search_2.setFocus()
        else:
            self.show_message('Book is not available')
            

    def show_message(self, message):
                msg  = QtWidgets.QMessageBox()
                # set width and height
                msg.setFixedSize(600, 350)

                msg.setText(message)

                msg.setWindowTitle("Message")
                msg.exec_()
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OtherWindow = QtWidgets.QMainWindow()
    ui = Ui_OtherWindow()
    ui.setupUi(OtherWindow)
    OtherWindow.show()
    sys.exit(app.exec_())
